# 为了让其他目录的代码可以调用本目录下的模块
# 在本目录下需要建立一个__init__.py(可以为空文件)
# 
# 有__init__.py文件的目录被视为一个包(Package)、否则被视为普通目录
# __init__.py本身被解释为一个模块、模块名就是目录文件夹的名称、它代表这个模块
# 比如本文件代表common模块
# 
# 多级目录就是多级的包结构
# 但每一级都需要又代表自己的__init__.py文件
# 
# 在这个目录下的模块(.py文件)名实际是common.common模块等以common.开头的名称
# 这就允许不同目录下的模块有相同的名称
# 不同的模块(.py文件)里面允许有名称相同的方法和变量名
# 
# 要避免自定义名和系统内置名冲突、否则不能调用系统模块
# 使用import myModule来测试myModule这个名词是否已被系统占用

if __name__ == "__main__":
    print(__name__)

# 命名习惯：
# 不需要被外部引用的变量和方法、定义为"_xx"、表示私有、不要随意访问
# 以"__xx"开头的类变量只能在类内部使用、外部无法访问(实际变量名为_Class__xx、通过_Class__xx实际就可以访问__xx，具体名称因Python版本而异)
# 允许外部引用的定义为"xx"
# 形如"__xx__"的变量是特殊变量、系统专用、自定义时不要使用